name: Flask CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION_MATRIX: '3.10,3.11,3.12'
  REQUIREMENTS_FILE: 'requirements.txt'
  FALLBACK_REQUIREMENTS_FILE: 'requirement.txt'

jobs:
  lint_test:
    name: Lint & Test (Python)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Select requirements file
        id: req
        run: |
          if [ -f "$REQUIREMENTS_FILE" ]; then echo "file=$REQUIREMENTS_FILE" >> $GITHUB_OUTPUT; elif [ -f "$FALLBACK_REQUIREMENTS_FILE" ]; then echo "file=$FALLBACK_REQUIREMENTS_FILE" >> $GITHUB_OUTPUT; else echo "No requirements file found"; exit 1; fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r "${{ steps.req.outputs.file }}" || true
          pip install pytest pytest-cov flake8 bandit safety

      - name: Lint (flake8)
        run: |
          if [ -d app ]; then flake8 app || true; else echo "No app directory"; fi

      - name: Run tests (pytest)
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml --cov-report=term
          if [ ! -f coverage.xml ] || ! grep -q "<coverage" coverage.xml; then echo "Coverage report not generated properly"; exit 1; fi

      - name: Coverage
        if: always()
        run: |
          python -m pytest --cov=app --cov-report=term-missing || true

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          [ -f requirements.txt ] && pip install -r requirements.txt || [ -f requirement.txt ] && pip install -r requirement.txt || true

      - name: Bandit scan
        run: bandit -r app -f json -o bandit-report.json || true

      - name: Safety audit
        run: safety check -r requirements.txt || safety check -r requirement.txt || true

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
          if-no-files-found: ignore

  build:
    name: Package App
    runs-on: ubuntu-latest
    needs: [ lint_test, security ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Resolve dependencies
        run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then cp requirements.txt dist.requirements.txt; elif [ -f requirement.txt ]; then cp requirement.txt dist.requirements.txt; fi

      - name: Create artifact
        run: |
          mkdir -p dist
          cp -r app requirement.txt requirements.txt README.md CHANGELOG.md manifest.json sw.js dist/ 2>/dev/null || true
          tar -czf flask-app-v${{ github.run_number }}.tar.gz dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-app-build
          path: flask-app-v${{ github.run_number }}.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-app-build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Flask App v${{ github.run_number }}
          body: |
            Automated Flask application release.

            - Python versions tested: 3.10, 3.11, 3.12
            - Lint & security scans executed
            - Artifact packaged (tar.gz)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [ lint_test, security, build ]
    if: always()
    steps:
      - name: Outcome
        run: |
          if [ "${{ job.status }}" != 'success' ]; then
            echo "One or more jobs failed."
          else
            echo "All jobs succeeded."
          fi
